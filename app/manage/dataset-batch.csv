<?php
// Script to retrieve datasets as .csv file
header('Content-type: text/csv');

// Check if the $date variable was passed in url, escape the string for mysql, and validate that it is a numeric value - pass $date value to select record
$date = isset($_GET['date']) ? trim(htmlentities(strip_tags($_GET['date']))) : null;

$separator = isset($_GET['separator']) ? $_GET['separator'] : '|';

// Set database parameters and connect to database
include_once '../meta/assets/dbconnect.inc';

$query = "
	SELECT * from datasets
	WHERE dataset_temporalCoverage LIKE '$date%'
	AND status = 'a'
	ORDER BY recordInfo_recordIdentifier
";

// Run query for metadata items, store in $getCitationText variable
$getCitationText = mysql_query($query);
$num_rows = mysql_num_rows($getCitationText);

// Display message if no items are returned
if ($num_rows == 0)
{
	echo 'There were no metadata items returned from the current request.'."\n";
	exit;
}
elseif (!$getCitationText)
{
	die('Error retrieving metadata items from database! '.'Error: '. mysql_error() .'');
}

echo "sep=$separator\n";

// Column headings
echo "Creators [ MSU College ] [ MSU Department ] [ Other Affiliation ]${separator}Access Conditions${separator}Dataset Name${separator}Publication Date${separator}Citation${separator}DOI${separator}Categories${separator}Keywords${separator}Description${separator}Grantor(s)\n";

while ($row = mysql_fetch_object($getCitationText))
{
	$id = $row->recordInfo_recordIdentifier;
	$datasetName = $row->dataset_name;
	$publishDate = $row->dataset_temporalCoverage;
	$doi = $row->dataset_doi;
	$category1 = $row->dataset_category1;
	$category2 = $row->dataset_category2;
	$category3 = $row->dataset_category3;
	$keywords = $row->dataset_keywords;
	$description = $row->dataset_description;
	$access = $row->dataset_license;

	// Get creators
	$creatorQuery = "
		SELECT creator_key, creator_name
		FROM creators
		WHERE recordInfo_recordIdentifier = $id
		ORDER BY creator_key
	";

	$getCreators = @mysql_query($creatorQuery);

	if (!$getCreators)
	{
		die('Error retrieving metadata items from database! ' . 'Error: ' .  mysql_error() . '');
	}

	$numCreators = mysql_num_rows($getCreators);

	// Put $creators in double quotes so newlines will be interpreted as soft enters
	$creators = '"';
	$creatorCount = 0;
	$datasetCreators = '"';
	$continue = "";
	while ($creatorRow = mysql_fetch_object($getCreators))
	{
		$creatorCount++;
		switch ($creatorCount)
		{
			case 1:
				$datasetCreators = $creatorRow->creator_name;
				break;
			case $numCreators:
				$datasetCreators .= ', and ' . reverseNames($creatorRow->creator_name);
				break;
			default:
				$datasetCreators .= ', ' . reverseNames($creatorRow->creator_name);
		}

		// Get affiliations
		$creatorKey = $creatorRow->creator_key;

		$affiliationQuery = "
			SELECT name_affiliation_msuCollege, name_affiliation_msuDepartment, name_affiliation_otherAffiliation
			FROM affiliations
			WHERE creator_key = $creatorKey
			ORDER BY affiliation_key
		";

		$getAffiliations = @mysql_query($affiliationQuery);

		if (!$getAffiliations)
		{
			die('Error retrieving metadata items from database! ' . 'Error: ' .  mysql_error() . '');
		}

		$creators .= $continue . $creatorRow->creator_name;

		while ($affiliationRow = mysql_fetch_object($getAffiliations))
		{
			$creators .=
				' [ ' . $affiliationRow->name_affiliation_msuCollege . ' ] ' .
				' [ ' . $affiliationRow->name_affiliation_msuDepartment . ' ] ' .
				' [' .  $affiliationRow->name_affiliation_otherAffiliation . ' ]';
		}
		$continue = "\n";
	}
	$creators .= '"';

	// Create $doi string
/*
	if (strlen($doi) > 0)
	{
		$doi = "https://dx.doi.org/$doi";
	}
	else
	{
		$doi = "";
	}
*/

	// Create $citation string
	$citation = 
		($datasetCreators != "" ? "$datasetCreators."   : "") .
		($datasetName     != "" ? " \"$datasetName.\""  : "") .
		($publishDate     != "" ? " ($publishDate)" : "") .
		($doi             != "" ? " DOI:$doi."          : "");

	// Remove carriage returns from description
	$description = str_replace("\r\n", "\n", $description);
	$description = str_replace("\n\r", "\n", $description);
	$description = str_replace("\r", "\n", $description);
	$description = '"' . addslashes($description) . '"';

	// Output the content
	echo $creators;
	echo $separator;
//	echo ($access != NULL) ? $access : " ";
//	echo $separator;
	echo $access;
	echo $separator;
	echo $datasetName;
	echo $separator;
	echo $publishDate;
	echo $separator; 
//	echo ($doi != "") ? $doi : "DOI not available.";
//	echo $separator;
	echo $citation; 
	echo $separator; 
	echo $doi;
	echo $separator; 
	echo
		' [ ' . $category1 . ' ] ' .
		' [ ' . $category2 . ' ] ' .
		' [' .  $category3 . ' ]';
	echo $separator;
	echo $keywords;
	echo $separator;
	echo $description;
	echo "\n";
}

function reverseNames($name)
{
	$commaPosition = strpos($name, ',');

	if (!$commaPosition)
	{
		return $name;
	}
	else
	{
		return trim(substr($name, $commaPosition + 1)) . ' ' . trim(substr($name, 0, $commaPosition));
	}
}
?>
